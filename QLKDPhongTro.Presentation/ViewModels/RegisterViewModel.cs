using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System.Threading.Tasks;
using System.Windows;
using QLKDPhongTro.DataLayer.Models;
using QLKDPhongTro.DataLayer.Repositories;
using QLKDPhongTro.Presentation.Views.Windows;

namespace QLKDPhongTro.Presentation.ViewModels
{
    public partial class RegisterViewModel : ObservableObject
    {
        private readonly UserRepository _userRepository;

        public RegisterViewModel()
        {
            _userRepository = new UserRepository();
        }

        [ObservableProperty]
        private string _username = string.Empty;

        [ObservableProperty]
        private string _email = string.Empty;

        [ObservableProperty]
        private string _password = string.Empty;

        [ObservableProperty]
        private string _confirmPassword = string.Empty;

        [ObservableProperty]
        private bool _isLoading = false;

        [RelayCommand]
        public async Task RegisterAsync()
        {
            if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(Email) ||
                string.IsNullOrWhiteSpace(Password) || string.IsNullOrWhiteSpace(ConfirmPassword))
            {
                MessageBox.Show("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", "Th√¥ng b√°o", 
                    MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            if (Password != ConfirmPassword)
            {
                MessageBox.Show("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!", "Th√¥ng b√°o", 
                    MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            // Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
            if (!Email.Contains("@") || !Email.Contains("."))
            {
                MessageBox.Show("Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ email h·ª£p l·ªá!", "Th√¥ng b√°o", 
                    MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            // Ki·ªÉm tra ƒëi·ªÅu ki·ªán m·∫≠t kh·∫©u
            if (Password.Length < 6)
            {
                MessageBox.Show("M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!", "Th√¥ng b√°o", 
                    MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            IsLoading = true;
            try
            {
                // T·∫°o t√†i kho·∫£n m·ªõi tr·ª±c ti·∫øp
                var newUser = new User
                {
                    TenDangNhap = Username,
                    Email = Email,
                    MatKhau = Password,
                    SoDienThoai = "" // C√≥ th·ªÉ th√™m tr∆∞·ªùng n√†y n·∫øu c·∫ßn
                };

                bool accountCreated = await _userRepository.RegisterAsync(newUser);
                
                if (accountCreated)
                {
                    // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                    MessageBox.Show("üéâ T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!\n\n" +
                                  $"T√™n ƒëƒÉng nh·∫≠p: {Username}\n" +
                                  $"Email: {Email}\n\n" +
                                  "B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay b√¢y gi·ªù.", 
                                  "ƒêƒÉng k√Ω th√†nh c√¥ng", 
                                  MessageBoxButton.OK, 
                                  MessageBoxImage.Information);

                    // Chuy·ªÉn v·ªÅ m√†n h√¨nh ƒëƒÉng nh·∫≠p
                    var loginWindow = new LoginWindow();
                    loginWindow.Show();
                    
                    // ƒê√≥ng c·ª≠a s·ªï ƒëƒÉng k√Ω
                    Application.Current.MainWindow?.Close();
                    Application.Current.MainWindow = loginWindow;
                }
                else
                {
                    MessageBox.Show("‚ùå Kh√¥ng th·ªÉ t·∫°o t√†i kho·∫£n.\n\n" +
                                  "C√≥ th·ªÉ t√™n ƒëƒÉng nh·∫≠p ho·∫∑c email ƒë√£ t·ªìn t·∫°i.\n" +
                                  "Vui l√≤ng th·ª≠ l·∫°i v·ªõi th√¥ng tin kh√°c.", 
                                  "L·ªói t·∫°o t√†i kho·∫£n", 
                                  MessageBoxButton.OK, 
                                  MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"L·ªói khi t·∫°o t√†i kho·∫£n: {ex.Message}", "L·ªói", 
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {
                IsLoading = false;
            }
        }


        [RelayCommand]
        private void NavigateToLogin()
        {
            var loginWindow = new LoginWindow();
            loginWindow.Show();

            Application.Current.MainWindow?.Close();
            Application.Current.MainWindow = loginWindow;
        }
    }
}
