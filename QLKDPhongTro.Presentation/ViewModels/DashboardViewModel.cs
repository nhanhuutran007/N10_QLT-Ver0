using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using QLKDPhongTro.Presentation.Views.Windows;
using System.Collections.ObjectModel;
using System.Windows;

namespace QLKDPhongTro.Presentation.ViewModels
{
    public partial class DashboardViewModel : ViewModelBase
    {
        // C√°c thu·ªôc t√≠nh th·ªëng k√™
        [ObservableProperty]
        private int _totalRooms = 24;

        [ObservableProperty]
        private int _occupiedRooms = 18;

        [ObservableProperty]
        private int _emptyRooms = 6;

        [ObservableProperty]
        private int _totalTenants = 32;

        [ObservableProperty]
        private decimal _monthlyRevenue = 45000000;

        [ObservableProperty]
        private double _growthRate = 12.5;

        [ObservableProperty]
        private string _currentUser = "Admin User";

        [ObservableProperty]
        private string _userEmail = "admin@example.com";

        // Danh s√°ch th√¥ng b√°o
        [ObservableProperty]
        private ObservableCollection<NotificationItem> _notifications = new();

        public DashboardViewModel()
        {
            InitializeNotifications();
        }

        private void InitializeNotifications()
        {
            Notifications = new ObservableCollection<NotificationItem>
            {
                new NotificationItem
                {
                    Title = "H·ª£p ƒë·ªìng s·∫Øp h·∫øt h·∫°n",
                    Message = "3 h·ª£p ƒë·ªìng s·∫Ω h·∫øt h·∫°n trong 7 ng√†y t·ªõi",
                    Type = NotificationType.Warning,
                    Icon = "‚ö†Ô∏è"
                },
                new NotificationItem
                {
                    Title = "Ph√≤ng tr·ªëng",
                    Message = "Ph√≤ng 201, 305 c·∫ßn d·ªçn d·∫πp",
                    Type = NotificationType.Info,
                    Icon = "üÜì"
                },
                new NotificationItem
                {
                    Title = "Thanh to√°n m·ªõi",
                    Message = "Ph√≤ng 102 ƒë√£ thanh to√°n ti·ªÅn thu√™",
                    Type = NotificationType.Success,
                    Icon = "‚úÖ"
                }
            };
        }

        // C√°c l·ªánh ƒëi·ªÅu h∆∞·ªõng
        [RelayCommand]
        private void NavigateToOverview()
        {
            MessageBox.Show("ƒê√£ chuy·ªÉn ƒë·∫øn trang T·ªïng quan", "Th√¥ng b√°o", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        [RelayCommand]
        private void NavigateToRooms()
        {
            var rentedRoomWindow = new RoomWindow();
            rentedRoomWindow.Show();
            // Close the current dashboard window
            Application.Current.Windows.OfType<Window>().FirstOrDefault(w => w.DataContext == this)?.Close();
        }

        [RelayCommand]
        private void NavigateToTenants()
        {
            var tenantWindow = new TenantManagementWindow();
            tenantWindow.Show();
            // Close the current dashboard window
            Application.Current.Windows.OfType<Window>().FirstOrDefault(w => w.DataContext == this)?.Close();
        }

        [RelayCommand]
        private void NavigateToBills()
        {
            MessageBox.Show("ƒê√£ chuy·ªÉn ƒë·∫øn trang H√≥a ƒë∆°n", "Th√¥ng b√°o", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        [RelayCommand]
        private void NavigateToContracts()
        {
            // L·∫•y c·ª≠a s·ªï Dashboard hi·ªán t·∫°i
            var dashboard = Application.Current.Windows
                .OfType<Window>()
                .FirstOrDefault(w => w.DataContext is DashboardViewModel);

            if (dashboard == null)
            {
                MessageBox.Show("Kh√¥ng t√¨m th·∫•y c·ª≠a s·ªï Dashboard!", "L·ªói", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            // ·∫®n Dashboard
            dashboard.Hide();

            // M·ªü c·ª≠a s·ªï H·ª£p ƒë·ªìng
            var contractWindow = new ContractManagementWindow
            {
                Owner = dashboard, // üëà G·∫Øn Owner l√† Dashboard
                WindowStartupLocation = WindowStartupLocation.CenterOwner,
                ShowInTaskbar = true
            };

            // Khi c·ª≠a s·ªï H·ª£p ƒë·ªìng ƒë√≥ng ‚Üí hi·ªán l·∫°i Dashboard
            contractWindow.Closed += (s, e) =>
            {
                Application.Current.Dispatcher.Invoke(() =>
                {
                    dashboard.Show();
                    dashboard.Activate();
                });
            };

            // M·ªü theo ki·ªÉu kh√¥ng ch·∫∑n UI
            contractWindow.Show();
        }

        [RelayCommand]
        private void NavigateToSettings()
        {
            MessageBox.Show("ƒê√£ chuy·ªÉn ƒë·∫øn trang C√†i ƒë·∫∑t", "Th√¥ng b√°o", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        [RelayCommand]
        private void Logout()
        {
            var result = MessageBox.Show("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?", "X√°c nh·∫≠n ƒëƒÉng xu·∫•t", 
                MessageBoxButton.YesNo, MessageBoxImage.Question);
            
            if (result == MessageBoxResult.Yes)
            {
                // Logic ƒëƒÉng xu·∫•t s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai ·ªü ƒë√¢y
                Application.Current.Shutdown();
            }
        }

        // C√°c l·ªánh h√†nh ƒë·ªông nhanh
        [RelayCommand]
        private void AddRoom()
        {
            MessageBox.Show("T√≠nh nƒÉng th√™m ph√≤ng s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai", "Th√¥ng b√°o", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        [RelayCommand]
        private void AddTenant()
        {
            MessageBox.Show("T√≠nh nƒÉng th√™m kh√°ch thu√™ s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai", "Th√¥ng b√°o", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        [RelayCommand]
        private void CreateBill()
        {
            MessageBox.Show("T√≠nh nƒÉng t·∫°o h√≥a ƒë∆°n s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai", "Th√¥ng b√°o", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        [RelayCommand]
        private void NewContract()
        {
            MessageBox.Show("T√≠nh nƒÉng t·∫°o h·ª£p ƒë·ªìng m·ªõi s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai", "Th√¥ng b√°o", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        [RelayCommand]
        private void ViewAllNotifications()
        {
            MessageBox.Show("T√≠nh nƒÉng xem t·∫•t c·∫£ th√¥ng b√°o s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai", "Th√¥ng b√°o", MessageBoxButton.OK, MessageBoxImage.Information);
        }
    }

    // L·ªõp h·ªó tr·ª£ cho th√¥ng b√°o
    public class NotificationItem
    {
        public string Title { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
        public NotificationType Type { get; set; }
        public string Icon { get; set; } = string.Empty;
    }

    public enum NotificationType
    {
        Info,
        Warning,
        Success,
        Error
    }
}
