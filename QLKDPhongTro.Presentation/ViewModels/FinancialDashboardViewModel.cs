using QLKDPhongTro.BusinessLayer.Controllers;
using QLKDPhongTro.BusinessLayer.DTOs;
using QLKDPhongTro.DataLayer.Repositories;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

namespace QLKDPhongTro.Presentation.ViewModels
{
    public class FinancialDashboardViewModel : INotifyPropertyChanged
    {
        private readonly FinancialController? _financialController;
        private readonly bool _useSampleData = false;

        #region Properties

        private FinancialStatsDto _financialStats = new();
        public FinancialStatsDto FinancialStats
        {
            get => _financialStats;
            set
            {
                _financialStats = value;
                OnPropertyChanged();
            }
        }

        private ObservableCollection<DebtReportDto> _debts = [];
        public ObservableCollection<DebtReportDto> Debts
        {
            get => _debts;
            set
            {
                _debts = value;
                OnPropertyChanged();
                OnPropertyChanged(nameof(HasDebts));
                OnPropertyChanged(nameof(TotalDebtsCount));
                OnPropertyChanged(nameof(TotalDebtAmount));
            }
        }

        private ObservableCollection<TransactionHistoryDto> _transactionHistory = [];
        public ObservableCollection<TransactionHistoryDto> TransactionHistory
        {
            get => _transactionHistory;
            set
            {
                _transactionHistory = value;
                OnPropertyChanged();
                OnPropertyChanged(nameof(HasTransactions));
                OnPropertyChanged(nameof(TotalTransactionsCount));
                OnPropertyChanged(nameof(TotalTransactionAmount));
            }
        }

        private string _searchText = string.Empty;
        public string SearchText
        {
            get => _searchText;
            set
            {
                _searchText = value;
                OnPropertyChanged();
            }
        }

        private bool _isLoading;
        public bool IsLoading
        {
            get => _isLoading;
            set
            {
                _isLoading = value;
                OnPropertyChanged();
                OnPropertyChanged(nameof(IsNotLoading));
            }
        }

        public bool IsNotLoading => !IsLoading;

        public DateTime? FromDate { get; set; }
        public DateTime? ToDate { get; set; }

        public DebtReportDto? SelectedDebt { get; set; }

        #endregion

        #region Commands

        public ICommand LoadDataCommand { get; }
        public ICommand ShowPaymentFormCommand { get; }
        public ICommand ShowExpenseFormCommand { get; }
        public ICommand PayDebtCommand { get; }
        public ICommand FilterTransactionsCommand { get; }
        public ICommand ExportReportCommand { get; }
        public ICommand AutoGenerateDebtsCommand { get; }
        public ICommand RefreshCommand { get; }
        public ICommand ClearSearchCommand { get; }
        public ICommand ClearDateFilterCommand { get; }
        public ICommand SearchCommand { get; }

        #endregion

        #region Events

        public event EventHandler? ShowPaymentFormRequested;
        public event EventHandler? ShowExpenseFormRequested;
        public event EventHandler<string>? ShowMessageRequested;
        public event EventHandler? DataRefreshed;
        public event PropertyChangedEventHandler? PropertyChanged;

        #endregion

        public FinancialDashboardViewModel()
        {
            try
            {
                var paymentRepository = new PaymentRepository();
                var contractRepository = new ContractRepository();
                var roomRepository = new RentedRoomRepository();
                var tenantRepository = new TenantRepository();

                _financialController = new FinancialController(
                    paymentRepository,
                    contractRepository,
                    roomRepository,
                    tenantRepository);
            }
            catch (Exception ex)
            {
                ShowMessageRequested?.Invoke(this, $"Không thể kết nối database: {ex.Message}. Đang sử dụng dữ liệu mẫu.");
            }

            // Khởi tạo commands
            LoadDataCommand = new RelayCommand(async () => await LoadDataAsync());
            ShowPaymentFormCommand = new RelayCommand(() => ShowPaymentFormRequested?.Invoke(this, EventArgs.Empty));
            ShowExpenseFormCommand = new RelayCommand(() => ShowExpenseFormRequested?.Invoke(this, EventArgs.Empty));
            PayDebtCommand = new RelayCommand<DebtReportDto?>(async (debt) => await PayDebtAsync(debt));
            FilterTransactionsCommand = new RelayCommand(async () => await FilterTransactionsAsync());
            ExportReportCommand = new RelayCommand(async () => await ExportReportAsync());
            AutoGenerateDebtsCommand = new RelayCommand(async () => await AutoGenerateDebtsAsync());
            RefreshCommand = new RelayCommand(async () => await RefreshDataAsync());
            ClearSearchCommand = new RelayCommand(ClearSearch);
            ClearDateFilterCommand = new RelayCommand(ClearDateFilter);
            SearchCommand = new RelayCommand(async () => await SearchDebtsAsync());

            // Load dữ liệu ban đầu
            _ = InitializeAsync();
        }

        #region Public Methods

        public async Task InitializeAsync()
        {
            await LoadDataAsync();
        }

        public async Task RefreshDataAsync()
        {
            await LoadDataAsync();
            DataRefreshed?.Invoke(this, EventArgs.Empty);
        }

        public async Task LoadDataAsync()
        {
            await LoadDataInternalAsync(true);
        }

        public async Task SearchDebtsAsync()
        {
            if (string.IsNullOrEmpty(SearchText))
            {
                await LoadDataAsync();
                return;
            }

            try
            {
                IsLoading = true;

                // Filter trên dữ liệu hiện tại (tạm thời)
                var filtered = _debts
                    .Where(d => (d.TenPhong?.Contains(SearchText, StringComparison.OrdinalIgnoreCase) == true)
                             || (d.TenKhachHang?.Contains(SearchText, StringComparison.OrdinalIgnoreCase) == true)
                             || (d.SoDienThoai?.Contains(SearchText) == true)
                             || (d.ThangNam?.Contains(SearchText) == true))
                    .ToList();

                Debts = new ObservableCollection<DebtReportDto>(filtered);
                ShowMessageRequested?.Invoke(this, $"Tìm thấy {filtered.Count} kết quả");
            }
            catch (Exception ex)
            {
                ShowMessageRequested?.Invoke(this, $"Lỗi khi tìm kiếm: {ex.Message}");
            }
            finally
            {
                IsLoading = false;
            }
        }

        public async Task PayDebtAsync(DebtReportDto? debt)
        {
            if (debt == null) return;

            try
            {
                var result = MessageBox.Show(
                    $"Xác nhận thanh toán cho phòng {debt.TenPhong}?\n" +
                    $"Người thuê: {debt.TenKhachHang}\n" +
                    $"Số tiền: {debt.TongTien:N0} VNĐ\n" +
                    $"Tháng: {debt.ThangNam}",
                    "Xác nhận thanh toán",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Question);

                if (result == MessageBoxResult.Yes)
                {
                    IsLoading = true;

                    var paymentRepository = new PaymentRepository();
                    var success = await paymentRepository.MarkAsPaidAsync(debt.MaThanhToan, DateTime.Now);

                    if (success)
                    {
                        ShowMessageRequested?.Invoke(this, "Thanh toán thành công!");
                        await RefreshDataAsync();
                    }
                    else
                    {
                        ShowMessageRequested?.Invoke(this, "Lỗi khi thanh toán!");
                    }
                }
            }
            catch (Exception ex)
            {
                ShowMessageRequested?.Invoke(this, $"Lỗi khi thanh toán: {ex.Message}");
            }
            finally
            {
                IsLoading = false;
            }
        }

        public async Task FilterTransactionsAsync()
        {
            try
            {
                IsLoading = true;

                // Tạm thời sử dụng dữ liệu mẫu
                await LoadSampleTransactions();
                ShowMessageRequested?.Invoke(this, $"Đã lọc {TransactionHistory.Count} giao dịch");
            }
            catch (Exception ex)
            {
                ShowMessageRequested?.Invoke(this, $"Lỗi khi lọc giao dịch: {ex.Message}");
            }
            finally
            {
                IsLoading = false;
            }
        }

        public async Task AutoGenerateDebtsAsync()
        {
            try
            {
                var result = MessageBox.Show(
                    "Tính năng này sẽ tạo công nợ tự động cho tất cả hợp đồng đang hoạt động.\n" +
                    "Bạn có chắc chắn muốn tiếp tục?",
                    "Xác nhận tạo công nợ tự động",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Question);

                if (result == MessageBoxResult.Yes)
                {
                    IsLoading = true;

                    // Thêm dữ liệu mẫu mới
                    var newDebt = new DebtReportDto
                    {
                        MaThanhToan = _debts.Count + 1,
                        TenPhong = "P201",
                        TenKhachHang = "Người thuê mới",
                        SoDienThoai = "0900000000",
                        ThangNam = DateTime.Now.ToString("MM/yyyy"),
                        TongTien = 3000000
                    };

                    var updatedDebts = _debts.ToList();
                    updatedDebts.Add(newDebt);
                    Debts = new ObservableCollection<DebtReportDto>(updatedDebts);

                    ShowMessageRequested?.Invoke(this, "Đã tạo 1 công nợ tự động");
                }
            }
            catch (Exception ex)
            {
                ShowMessageRequested?.Invoke(this, $"Lỗi khi tạo công nợ tự động: {ex.Message}");
            }
            finally
            {
                IsLoading = false;
            }
        }

        public async Task ExportReportAsync()
        {
            try
            {
                var reportData = new
                {
                    ThoiGian = DateTime.Now.ToString("dd/MM/yyyy HH:mm"),
                    TongThuNhap = FinancialStats.TongThuNhap,
                    TongChiPhi = FinancialStats.TongChiPhi,
                    LoiNhuan = FinancialStats.LoiNhuan,
                    TongCongNo = FinancialStats.TongCongNo,
                    SoPhongNo = FinancialStats.SoPhongNo,
                    SoCongNo = Debts.Count,
                    SoGiaoDich = TransactionHistory.Count
                };

                var reportInfo =
                    $"BÁO CÁO TÀI CHÍNH\n" +
                    $"Thời gian: {reportData.ThoiGian}\n" +
                    $"Tổng thu nhập: {reportData.TongThuNhap:N0} VNĐ\n" +
                    $"Tổng chi phí: {reportData.TongChiPhi:N0} VNĐ\n" +
                    $"Lợi nhuận: {reportData.LoiNhuan:N0} VNĐ\n" +
                    $"Tổng công nợ: {reportData.TongCongNo:N0} VNĐ\n" +
                    $"Số phòng nợ: {reportData.SoPhongNo}\n" +
                    $"Số công nợ: {reportData.SoCongNo}\n" +
                    $"Số giao dịch: {reportData.SoGiaoDich}";

                MessageBox.Show(reportInfo, "Báo Cáo Tài Chính", MessageBoxButton.OK, MessageBoxImage.Information);
                ShowMessageRequested?.Invoke(this, "Báo cáo đã được tạo thành công!");
                await Task.CompletedTask;
            }
            catch (Exception ex)
            {
                ShowMessageRequested?.Invoke(this, $"Lỗi khi xuất báo cáo: {ex.Message}");
            }
        }

        public void ClearSearch()
        {
            SearchText = string.Empty;
            _ = LoadDataAsync();
        }

        public void ClearDateFilter()
        {
            FromDate = null;
            ToDate = null;
            _ = FilterTransactionsAsync();
        }

        #endregion

        #region Private Helpers

        private async Task LoadDataInternalAsync(bool showMessage = true)
        {
            try
            {
                IsLoading = true;

                // Luôn sử dụng dữ liệu mẫu cho demo
                await LoadSampleData();
                if (showMessage)
                    ShowMessageRequested?.Invoke(this, "Dữ liệu đã được tải thành công!");
            }
            catch (Exception ex)
            {
                await LoadSampleData();
                ShowMessageRequested?.Invoke(this, $"Lỗi khi tải dữ liệu: {ex.Message}. Đang sử dụng dữ liệu mẫu.");
            }
            finally
            {
                IsLoading = false;
            }
        }

        private async Task LoadSampleData()
        {
            // Tạo dữ liệu mẫu
            FinancialStats = new FinancialStatsDto
            {
                TongThuNhap = 12500000,
                TongChiPhi = 3500000,
                LoiNhuan = 9000000,
                TongCongNo = 10500000,
                SoPhongNo = 3
            };

            var sampleDebts = new List<DebtReportDto>
            {
                new() { MaThanhToan = 1, TenPhong = "P101", TenKhachHang = "Nguyễn Văn A", SoDienThoai = "0123456789", ThangNam = "11/2024", TongTien = 3500000 },
                new() { MaThanhToan = 2, TenPhong = "P102", TenKhachHang = "Trần Thị B", SoDienThoai = "0987654321", ThangNam = "11/2024", TongTien = 3200000 },
                new() { MaThanhToan = 3, TenPhong = "A101", TenKhachHang = "Lê Văn C", SoDienThoai = "0912345678", ThangNam = "11/2024", TongTien = 3800000 }
            };

            Debts = new ObservableCollection<DebtReportDto>(sampleDebts);

            await LoadSampleTransactions();
            await Task.CompletedTask;
        }

        private async Task LoadSampleTransactions()
        {
            // Sử dụng đúng property names từ TransactionHistoryDto
            var sampleTransactions = new List<TransactionHistoryDto>
            {
                new() { MaThanhToan = 1, TenPhong = "P101", TenKhachHang = "Nguyễn Văn A", MoTa = "Thu tiền thuê phòng P101", SoTien = 3500000, ThoiGian = DateTime.Now.AddDays(-5), LoaiGiaoDich = "Thu tiền thuê" },
                new() { MaThanhToan = 2, TenPhong = "P102", TenKhachHang = "Trần Thị B", MoTa = "Thu tiền thuê phòng P102", SoTien = 3200000, ThoiGian = DateTime.Now.AddDays(-3), LoaiGiaoDich = "Thu tiền thuê" },
                new() { MaThanhToan = 3, TenPhong = "P101", TenKhachHang = "Nguyễn Văn A", MoTa = "Chi phí bảo trì điện nước", SoTien = -2000000, ThoiGian = DateTime.Now.AddDays(-1), LoaiGiaoDich = "Chi phí bảo trì" }
            };

            TransactionHistory = new ObservableCollection<TransactionHistoryDto>(sampleTransactions);
            await Task.CompletedTask;
        }

        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion

        #region Helper Properties

        public bool HasDebts => Debts.Any();
        public bool HasTransactions => TransactionHistory.Any();
        public int TotalDebtsCount => Debts.Count;
        public int TotalTransactionsCount => TransactionHistory.Count;
        public decimal TotalDebtAmount => Debts.Sum(d => d.TongTien);
        public decimal TotalTransactionAmount => TransactionHistory.Sum(t => t.SoTien);

        #endregion
    }
}

namespace QLKDPhongTro.Presentation.ViewModels
{
    public abstract class BaseViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual void OnPropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        protected bool SetProperty<T>(ref T field, T value, [System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value)) return false;
            field = value;
            OnPropertyChanged(propertyName);
            return true;
        }
    }

    public class RelayCommand : ICommand
    {
        private readonly Action _execute;
        private readonly Func<bool>? _canExecute;

        public RelayCommand(Action execute, Func<bool>? canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        public event EventHandler? CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }

        public bool CanExecute(object? parameter) => _canExecute?.Invoke() ?? true;

        public void Execute(object? parameter) => _execute();
    }

    public class RelayCommand<T> : ICommand
    {
        private readonly Action<T?> _execute;
        private readonly Func<T?, bool>? _canExecute;

        public RelayCommand(Action<T?> execute, Func<T?, bool>? canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        public event EventHandler? CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }

        public bool CanExecute(object? parameter) => _canExecute?.Invoke((T?)parameter) ?? true;

        public void Execute(object? parameter) => _execute((T?)parameter);
    }
}