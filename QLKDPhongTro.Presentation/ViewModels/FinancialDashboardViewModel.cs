using QLKDPhongTro.BusinessLayer.Controllers;
using QLKDPhongTro.BusinessLayer.DTOs.Financial;
using QLKDPhongTro.DataLayer.Repositories;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows;

namespace QLKDPhongTro.Presentation.ViewModels
{
    public class FinancialDashboardViewModel : BaseViewModel
    {
        private readonly FinancialController _financialController;

        #region Properties

        // Thống kê tổng quan
        private FinancialStatsDto _financialStats;
        public FinancialStatsDto FinancialStats
        {
            get => _financialStats;
            set => SetProperty(ref _financialStats, value);
        }

        // Danh sách công nợ
        private ObservableCollection<DebtReportDto> _debts;
        public ObservableCollection<DebtReportDto> Debts
        {
            get => _debts;
            set => SetProperty(ref _debts, value);
        }

        // Lịch sử giao dịch
        private ObservableCollection<TransactionHistoryDto> _transactionHistory;
        public ObservableCollection<TransactionHistoryDto> TransactionHistory
        {
            get => _transactionHistory;
            set => SetProperty(ref _transactionHistory, value);
        }

        // Tìm kiếm và lọc
        private string _searchDebtText;
        public string SearchDebtText
        {
            get => _searchDebtText;
            set
            {
                SetProperty(ref _searchDebtText, value);
                FilterDebts();
            }
        }

        private DateTime? _fromDate;
        public DateTime? FromDate
        {
            get => _fromDate;
            set => SetProperty(ref _fromDate, value);
        }

        private DateTime? _toDate;
        public DateTime? ToDate
        {
            get => _toDate;
            set => SetProperty(ref _toDate, value);
        }

        // Loading states
        private bool _isLoading;
        public bool IsLoading
        {
            get => _isLoading;
            set => SetProperty(ref _isLoading, value);
        }

        #endregion

        #region Commands

        public ICommand LoadDataCommand { get; }
        public ICommand ShowPaymentFormCommand { get; }
        public ICommand ShowExpenseFormCommand { get; }
        public ICommand PayDebtCommand { get; }
        public ICommand FilterTransactionsCommand { get; }
        public ICommand ExportReportCommand { get; }
        public ICommand AutoGenerateDebtsCommand { get; }

        #endregion

        public FinancialDashboardViewModel()
        {
            var paymentRepository = new PaymentRepository();
            var contractRepository = new ContractRepository();
            var roomRepository = new RoomRepository();

            _financialController = new FinancialController(paymentRepository, contractRepository, roomRepository);

            // Khởi tạo commands
            LoadDataCommand = new RelayCommand(async () => await LoadDataAsync());
            ShowPaymentFormCommand = new RelayCommand(ShowPaymentForm);
            ShowExpenseFormCommand = new RelayCommand(ShowExpenseForm);
            PayDebtCommand = new RelayCommand<DebtReportDto>(async (debt) => await PayDebtAsync(debt));
            FilterTransactionsCommand = new RelayCommand(async () => await FilterTransactionsAsync());
            ExportReportCommand = new RelayCommand(ExportReport);
            AutoGenerateDebtsCommand = new RelayCommand(async () => await AutoGenerateDebtsAsync());

            // Load dữ liệu ban đầu
            _ = LoadDataAsync();
        }

        #region Methods

        private async Task LoadDataAsync()
        {
            try
            {
                IsLoading = true;

                // Load thống kê
                var stats = await _financialController.GetFinancialStatsAsync(DateTime.Now.Year);
                FinancialStats = stats;

                // Load công nợ
                var debts = await _financialController.GetDebtReportAsync();
                Debts = new ObservableCollection<DebtReportDto>(debts);

                // Load lịch sử giao dịch
                var transactions = await _financialController.GetTransactionHistoryAsync();
                TransactionHistory = new ObservableCollection<TransactionHistoryDto>(transactions);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Lỗi khi tải dữ liệu: {ex.Message}", "Lỗi", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {
                IsLoading = false;
            }
        }

        private void ShowPaymentForm()
        {
            // TODO: Mở form ghi nhận tiền thuê
            var paymentForm = new PaymentForm();
            paymentForm.Closed += async (s, e) => await LoadDataAsync();
            paymentForm.ShowDialog();
        }

        private void ShowExpenseForm()
        {
            // TODO: Mở form ghi nhận chi phí
            var expenseForm = new ExpenseForm();
            expenseForm.Closed += async (s, e) => await LoadDataAsync();
            expenseForm.ShowDialog();
        }

        private async Task PayDebtAsync(DebtReportDto debt)
        {
            if (debt == null) return;

            try
            {
                var result = MessageBox.Show(
                    $"Xác nhận thanh toán cho phòng {debt.TenPhong}?\nSố tiền: {debt.TongTien:N0} VNĐ",
                    "Xác nhận thanh toán",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Question);

                if (result == MessageBoxResult.Yes)
                {
                    var payRentDto = new PayRentDto
                    {
                        MaThanhToan = debt.MaThanhToan,
                        NgayThanhToan = DateTime.Now,
                        PhuongThucThanhToan = "Tiền mặt"
                    };

                    var validationResult = await _financialController.PayRentAsync(payRentDto);

                    if (validationResult.IsValid)
                    {
                        MessageBox.Show("Thanh toán thành công!", "Thành công", MessageBoxButton.OK, MessageBoxImage.Information);
                        await LoadDataAsync();
                    }
                    else
                    {
                        MessageBox.Show(validationResult.Message, "Lỗi", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Lỗi khi thanh toán: {ex.Message}", "Lỗi", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private async Task FilterTransactionsAsync()
        {
            try
            {
                var transactions = await _financialController.GetTransactionHistoryAsync(FromDate, ToDate);
                TransactionHistory = new ObservableCollection<TransactionHistoryDto>(transactions);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Lỗi khi lọc giao dịch: {ex.Message}", "Lỗi", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void FilterDebts()
        {
            if (string.IsNullOrEmpty(SearchDebtText))
            {
                // Reset to original list
                _ = LoadDataAsync();
                return;
            }

            var filtered = Debts?.Where(d =>
                d.TenPhong.Contains(SearchDebtText, StringComparison.OrdinalIgnoreCase) ||
                d.TenKhachHang.Contains(SearchDebtText, StringComparison.OrdinalIgnoreCase) ||
                d.SoDienThoai.Contains(SearchDebtText)
            ).ToList();

            Debts = new ObservableCollection<DebtReportDto>(filtered ?? new List<DebtReportDto>());
        }

        private async Task AutoGenerateDebtsAsync()
        {
            try
            {
                var currentMonth = DateTime.Now.ToString("MM/yyyy");
                var result = await _financialController.AutoGenerateDebtsAsync();

                if (result.IsValid)
                {
                    MessageBox.Show(result.Message, "Thành công", MessageBoxButton.OK, MessageBoxImage.Information);
                    await LoadDataAsync();
                }
                else
                {
                    MessageBox.Show(result.Message, "Lỗi", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Lỗi khi tạo công nợ tự động: {ex.Message}", "Lỗi", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void ExportReport()
        {
            try
            {
                // TODO: Implement export to Excel/PDF
                MessageBox.Show("Tính năng xuất báo cáo đang được phát triển", "Thông báo", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Lỗi khi xuất báo cáo: {ex.Message}", "Lỗi", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        #endregion
    }

    // Base ViewModel và RelayCommand
    public abstract class BaseViewModel : System.ComponentModel.INotifyPropertyChanged
    {
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

        protected bool SetProperty<T>(ref T field, T value, [System.Runtime.CompilerServices.CallerMemberName] string propertyName = "")
        {
            if (EqualityComparer<T>.Default.Equals(field, value)) return false;
            field = value;
            OnPropertyChanged(propertyName);
            return true;
        }
    }

    public class RelayCommand : ICommand
    {
        private readonly Action _execute;
        private readonly Func<bool> _canExecute;

        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }

        public bool CanExecute(object parameter) => _canExecute?.Invoke() ?? true;
        public void Execute(object parameter) => _execute();
    }

    public class RelayCommand<T> : ICommand
    {
        private readonly Action<T> _execute;
        private readonly Func<T, bool> _canExecute;

        public RelayCommand(Action<T> execute, Func<T, bool> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }

        public bool CanExecute(object parameter) => _canExecute?.Invoke((T)parameter) ?? true;
        public void Execute(object parameter) => _execute((T)parameter);
    }
}