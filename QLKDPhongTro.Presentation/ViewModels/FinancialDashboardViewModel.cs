using QLKDPhongTro.BusinessLayer.Controllers;
using QLKDPhongTro.BusinessLayer.DTOs;
using QLKDPhongTro.DataLayer.Repositories;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows;

namespace QLKDPhongTro.Presentation.ViewModels
{
    public class FinancialDashboardViewModel : BaseViewModel
    {
        private readonly FinancialController _financialController;

        #region Properties

        // Thống kê tổng quan
        private FinancialStatsDto _financialStats = new FinancialStatsDto();
        public FinancialStatsDto FinancialStats
        {
            get => _financialStats;
            set => SetProperty(ref _financialStats, value);
        }

        // Danh sách công nợ
        private ObservableCollection<DebtReportDto> _debts = new ObservableCollection<DebtReportDto>();
        public ObservableCollection<DebtReportDto> Debts
        {
            get => _debts;
            set => SetProperty(ref _debts, value);
        }

        // Lịch sử giao dịch
        private ObservableCollection<TransactionHistoryDto> _transactionHistory = new ObservableCollection<TransactionHistoryDto>();
        public ObservableCollection<TransactionHistoryDto> TransactionHistory
        {
            get => _transactionHistory;
            set => SetProperty(ref _transactionHistory, value);
        }

        // Tìm kiếm và lọc
        private string _searchDebtText = string.Empty;
        public string SearchDebtText
        {
            get => _searchDebtText;
            set
            {
                SetProperty(ref _searchDebtText, value);
                FilterDebts();
            }
        }

        private DateTime? _fromDate;
        public DateTime? FromDate
        {
            get => _fromDate;
            set => SetProperty(ref _fromDate, value);
        }

        private DateTime? _toDate;
        public DateTime? ToDate
        {
            get => _toDate;
            set => SetProperty(ref _toDate, value);
        }

        // Loading states
        private bool _isLoading;
        public bool IsLoading
        {
            get => _isLoading;
            set => SetProperty(ref _isLoading, value);
        }

        // Selected debt for payment
        private DebtReportDto _selectedDebt;
        public DebtReportDto SelectedDebt
        {
            get => _selectedDebt;
            set => SetProperty(ref _selectedDebt, value);
        }

        #endregion

        #region Commands

        public ICommand LoadDataCommand { get; }
        public ICommand ShowPaymentFormCommand { get; }
        public ICommand ShowExpenseFormCommand { get; }
        public ICommand PayDebtCommand { get; }
        public ICommand FilterTransactionsCommand { get; }
        public ICommand ExportReportCommand { get; }
        public ICommand AutoGenerateDebtsCommand { get; }
        public ICommand RefreshCommand { get; }
        public ICommand ClearSearchCommand { get; }
        public ICommand ClearDateFilterCommand { get; }

        #endregion

        #region Events

        public event EventHandler ShowPaymentFormRequested;
        public event EventHandler ShowExpenseFormRequested;
        public event EventHandler<string> ShowMessageRequested;
        public event EventHandler DataRefreshed;

        #endregion

        public FinancialDashboardViewModel()
        {
            // Khởi tạo repositories và controller
            var paymentRepository = new PaymentRepository();
            var contractRepository = new ContractRepository();
            var roomRepository = new RentedRoomRepository();
            var tenantRepository = new TenantRepository();

            _financialController = new FinancialController(
                paymentRepository,
                contractRepository,
                roomRepository,
                tenantRepository);

            // Khởi tạo commands
            LoadDataCommand = new RelayCommand(async () => await LoadDataAsync());
            ShowPaymentFormCommand = new RelayCommand(() => ShowPaymentFormRequested?.Invoke(this, EventArgs.Empty));
            ShowExpenseFormCommand = new RelayCommand(() => ShowExpenseFormRequested?.Invoke(this, EventArgs.Empty));
            PayDebtCommand = new RelayCommand<DebtReportDto>(async (debt) => await PayDebtAsync(debt));
            FilterTransactionsCommand = new RelayCommand(async () => await FilterTransactionsAsync());
            ExportReportCommand = new RelayCommand(async () => await ExportReportAsync());
            AutoGenerateDebtsCommand = new RelayCommand(async () => await AutoGenerateDebtsAsync());
            RefreshCommand = new RelayCommand(async () => await RefreshDataAsync());
            ClearSearchCommand = new RelayCommand(ClearSearch);
            ClearDateFilterCommand = new RelayCommand(ClearDateFilter);

            // Load dữ liệu ban đầu
            _ = InitializeAsync();
        }

        #region Public Methods

        public async Task InitializeAsync()
        {
            await LoadDataAsync();
        }

        public async Task RefreshDataAsync()
        {
            await LoadDataAsync();
            DataRefreshed?.Invoke(this, EventArgs.Empty);
        }

        #endregion

        #region Private Methods

        private async Task LoadDataAsync()
        {
            try
            {
                IsLoading = true;

                // Load thống kê
                var stats = await _financialController.GetFinancialStatsAsync(DateTime.Now.Year);
                FinancialStats = stats ?? new FinancialStatsDto();

                // Load công nợ
                var debts = await _financialController.GetDebtReportAsync();
                Debts = new ObservableCollection<DebtReportDto>(debts ?? new List<DebtReportDto>());

                // Load lịch sử giao dịch
                var transactions = await _financialController.GetTransactionHistoryAsync();
                TransactionHistory = new ObservableCollection<TransactionHistoryDto>(transactions ?? new List<TransactionHistoryDto>());

                ShowMessageRequested?.Invoke(this, "Dữ liệu đã được tải thành công!");
            }
            catch (Exception ex)
            {
                ShowMessageRequested?.Invoke(this, $"Lỗi khi tải dữ liệu: {ex.Message}");
            }
            finally
            {
                IsLoading = false;
            }
        }

        private async Task PayDebtAsync(DebtReportDto debt)
        {
            if (debt == null) return;

            try
            {
                var result = MessageBox.Show(
                    $"Xác nhận thanh toán cho phòng {debt.TenPhong}?\n" +
                    $"Người thuê: {debt.TenKhachHang}\n" +
                    $"Số tiền: {debt.TongTien:N0} VNĐ\n" +
                    $"Tháng: {debt.ThangNam}",
                    "Xác nhận thanh toán",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Question);

                if (result == MessageBoxResult.Yes)
                {
                    var payRentDto = new PayRentDto
                    {
                        MaThanhToan = debt.MaThanhToan,
                        NgayThanhToan = DateTime.Now,
                        PhuongThucThanhToan = "Tiền mặt",
                        GhiChu = $"Thanh toán công nợ tháng {debt.ThangNam}"
                    };

                    var validationResult = await _financialController.PayRentAsync(payRentDto);

                    if (validationResult.IsValid)
                    {
                        ShowMessageRequested?.Invoke(this, "Thanh toán thành công!");

                        // Cập nhật lại dữ liệu
                        await RefreshDataAsync();
                    }
                    else
                    {
                        ShowMessageRequested?.Invoke(this, $"Lỗi: {validationResult.Message}");
                    }
                }
            }
            catch (Exception ex)
            {
                ShowMessageRequested?.Invoke(this, $"Lỗi khi thanh toán: {ex.Message}");
            }
        }

        private async Task FilterTransactionsAsync()
        {
            try
            {
                IsLoading = true;
                var transactions = await _financialController.GetTransactionHistoryAsync(FromDate, ToDate);
                TransactionHistory = new ObservableCollection<TransactionHistoryDto>(transactions ?? new List<TransactionHistoryDto>());

                ShowMessageRequested?.Invoke(this, $"Đã lọc {TransactionHistory.Count} giao dịch");
            }
            catch (Exception ex)
            {
                ShowMessageRequested?.Invoke(this, $"Lỗi khi lọc giao dịch: {ex.Message}");
            }
            finally
            {
                IsLoading = false;
            }
        }

        private void FilterDebts()
        {
            if (string.IsNullOrEmpty(SearchDebtText))
            {
                return;
            }

            var filtered = _debts.Where(d =>
                (d.TenPhong?.Contains(SearchDebtText, StringComparison.OrdinalIgnoreCase) == true) ||
                (d.TenKhachHang?.Contains(SearchDebtText, StringComparison.OrdinalIgnoreCase) == true) ||
                (d.SoDienThoai?.Contains(SearchDebtText) == true) ||
                (d.ThangNam?.Contains(SearchDebtText) == true)
            ).ToList();

            Debts = new ObservableCollection<DebtReportDto>(filtered);
        }

        private async Task AutoGenerateDebtsAsync()
        {
            try
            {
                var result = MessageBox.Show(
                    "Tính năng này sẽ tạo công nợ tự động cho tất cả hợp đồng đang hoạt động.\n" +
                    "Bạn có chắc chắn muốn tiếp tục?",
                    "Xác nhận tạo công nợ tự động",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Question);

                if (result == MessageBoxResult.Yes)
                {
                    IsLoading = true;
                    var validationResult = await _financialController.AutoGenerateDebtsAsync();

                    if (validationResult.IsValid)
                    {
                        ShowMessageRequested?.Invoke(this, validationResult.Message);
                        await RefreshDataAsync();
                    }
                    else
                    {
                        ShowMessageRequested?.Invoke(this, $"Lỗi: {validationResult.Message}");
                    }
                }
            }
            catch (Exception ex)
            {
                ShowMessageRequested?.Invoke(this, $"Lỗi khi tạo công nợ tự động: {ex.Message}");
            }
            finally
            {
                IsLoading = false;
            }
        }

        private async Task ExportReportAsync()
        {
            try
            {
                // Tạo báo cáo tài chính
                var reportData = new
                {
                    ThoiGian = DateTime.Now.ToString("dd/MM/yyyy HH:mm"),
                    TongThuNhap = FinancialStats.TongThuNhap,
                    TongChiPhi = FinancialStats.TongChiPhi,
                    LoiNhuan = FinancialStats.LoiNhuan,
                    TongCongNo = FinancialStats.TongCongNo,
                    SoPhongNo = FinancialStats.SoPhongNo,
                    SoCongNo = Debts.Count,
                    SoGiaoDich = TransactionHistory.Count
                };

                // TODO: Implement export to Excel/PDF
                // Tạm thời hiển thị thông tin báo cáo
                var reportInfo =
                    $"BÁO CÁO TÀI CHÍNH\n" +
                    $"Thời gian: {reportData.ThoiGian}\n" +
                    $"Tổng thu nhập: {reportData.TongThuNhap:N0} VNĐ\n" +
                    $"Tổng chi phí: {reportData.TongChiPhi:N0} VNĐ\n" +
                    $"Lợi nhuận: {reportData.LoiNhuan:N0} VNĐ\n" +
                    $"Tổng công nợ: {reportData.TongCongNo:N0} VNĐ\n" +
                    $"Số phòng nợ: {reportData.SoPhongNo}\n" +
                    $"Số công nợ: {reportData.SoCongNo}\n" +
                    $"Số giao dịch: {reportData.SoGiaoDich}";

                MessageBox.Show(reportInfo, "Báo Cáo Tài Chính", MessageBoxButton.OK, MessageBoxImage.Information);

                ShowMessageRequested?.Invoke(this, "Báo cáo đã được tạo thành công!");
            }
            catch (Exception ex)
            {
                ShowMessageRequested?.Invoke(this, $"Lỗi khi xuất báo cáo: {ex.Message}");
            }
        }

        private void ClearSearch()
        {
            SearchDebtText = string.Empty;
            // Load lại toàn bộ dữ liệu
            _ = LoadDataAsync();
        }

        private void ClearDateFilter()
        {
            FromDate = null;
            ToDate = null;
            // Load lại toàn bộ giao dịch
            _ = FilterTransactionsAsync();
        }

        #endregion

        #region Helper Methods

        public bool HasDebts => Debts?.Any() == true;
        public bool HasTransactions => TransactionHistory?.Any() == true;
        public int TotalDebtsCount => Debts?.Count ?? 0;
        public int TotalTransactionsCount => TransactionHistory?.Count ?? 0;
        public decimal TotalDebtAmount => Debts?.Sum(d => d.TongTien) ?? 0;
        public decimal TotalTransactionAmount => TransactionHistory?.Sum(t => t.SoTien) ?? 0;

        #endregion
    }

    #region Base ViewModel and Commands

    public abstract class BaseViewModel : System.ComponentModel.INotifyPropertyChanged
    {
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

        protected bool SetProperty<T>(ref T field, T value, [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value)) return false;
            field = value;
            OnPropertyChanged(propertyName);
            return true;
        }
    }

    public class RelayCommand : ICommand
    {
        private readonly Action _execute;
        private readonly Func<bool> _canExecute;

        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }

        public bool CanExecute(object parameter) => _canExecute?.Invoke() ?? true;
        public void Execute(object parameter) => _execute();
    }

    public class RelayCommand<T> : ICommand
    {
        private readonly Action<T> _execute;
        private readonly Func<T, bool> _canExecute;

        public RelayCommand(Action<T> execute, Func<T, bool> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }

        public bool CanExecute(object parameter) => _canExecute?.Invoke((T)parameter) ?? true;
        public void Execute(object parameter) => _execute((T)parameter);
    }

    #endregion
}